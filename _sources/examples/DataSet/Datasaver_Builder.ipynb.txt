{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Using `datasaver_builder` and `dond_into` to streamline measurements\n",
    "\n",
    "This example notebook shows examples of how to use the `datasaver_builder` and `dond_into` extensions together. It showcases these as an intermediate abstraction layer between the low-level `Measurement` object and the high-level `doNd` routines.\n"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setup\n",
    "\n",
    "Here, we call necessary imports for running this notebook, as well as setting up a database, dummy parameters, and creating an experiment object."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Main Module Imports\n",
    "These are the main components we'll be looking at in this notebook."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from qcodes.dataset import DataSetDefinition, LinSweeper, datasaver_builder, dond_into"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Other imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from itertools import product\n",
    "from pathlib import Path\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "from qcodes.dataset import (\n",
    "    LinSweep,\n",
    "    Measurement,\n",
    "    initialise_or_create_database_at,\n",
    "    load_or_create_experiment,\n",
    "    plot_dataset,\n",
    ")\n",
    "from qcodes.parameters import Parameter, ParameterWithSetpoints\n",
    "from qcodes.validators import Arrays"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Set up database and experiment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "db_path = Path.cwd().parent / \"example_output\" / \"measurement_extensions.db\"\n",
    "initialise_or_create_database_at(db_file_with_abs_path=db_path)\n",
    "experiment = load_or_create_experiment(\"Examples\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Dummy Parameter Creation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "set1 = Parameter(\"set1\", get_cmd=None, set_cmd=None, initial_value=0)\n",
    "set2 = Parameter(\"set2\", get_cmd=None, set_cmd=None, initial_value=0)\n",
    "set3 = Parameter(\"set3\", get_cmd=None, set_cmd=None, initial_value=0)\n",
    "\n",
    "\n",
    "def get_set1():\n",
    "    return set1()\n",
    "\n",
    "\n",
    "def get_sum12():\n",
    "    return set1() + set2()\n",
    "\n",
    "\n",
    "def get_diff13():\n",
    "    return set1() - set3()\n",
    "\n",
    "\n",
    "meas1 = Parameter(\"meas1\", get_cmd=get_set1, set_cmd=False)\n",
    "meas2 = Parameter(\"meas2\", get_cmd=get_sum12, set_cmd=False)\n",
    "meas3 = Parameter(\"meas3\", get_cmd=get_diff13, set_cmd=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ParameterWithSetpoints Creation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_setpoints_array():\n",
    "    return np.linspace(-5, 5, 11)\n",
    "\n",
    "\n",
    "def get_pws_results():\n",
    "    setpoints_arr = get_setpoints_array()\n",
    "    return setpoints_arr**2 * set1()\n",
    "\n",
    "\n",
    "setpoint_array = Parameter(\n",
    "    \"setpoints\", get_cmd=get_setpoints_array, vals=Arrays(shape=(11,))\n",
    ")\n",
    "\n",
    "pws = ParameterWithSetpoints(\n",
    "    \"pws\",\n",
    "    setpoints=(setpoint_array,),\n",
    "    get_cmd=get_pws_results,\n",
    "    vals=Arrays(shape=(11,)),\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Using the `datasaver_builder`\n",
    "\n",
    "The `datasaver_builder` is a shortcut to creating multiple qcodes `Measurement` objects, registering the relevant parameters and dependencies, and entering the datasaver context managers.\n",
    "\n",
    "This process begins with the `DataSetDefinition`, a dataclass specifying the name of the dataset, the independent parameters, the dependent parameters, and optionally the experiment to write the dataset to. If the experiment kwarg is omitted, Qcodes will write to the default experiment. Note that the `datasaver_builder` assumes that all dependent parameters depend on all independent parameters. This is less flexible than the raw `Measurement` object, but covers the most common measurement types.\n",
    "\n",
    "Once the datasets have been defined, we enter the `datasaver_builder` by passing the list or tuple of `DataSetDefinition` objects.\n",
    "\n",
    "When we enter the context manager, we get a list of the respective datasavers, in an order which matches the order passed. These can be accessed like any other `DataSaver`, and arbitrary code can be executed in whatever order is needed. When the measurement is complete, these datasavers can then be assigned to datasets which can be plotted."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Starting experimental run with id: 1. \n",
      "Starting experimental run with id: 2. \n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "dataset_definition = [\n",
    "    DataSetDefinition(\n",
    "        name=\"dataset_1\",\n",
    "        independent=[set1, set2],\n",
    "        dependent=[meas2],\n",
    "        experiment=experiment,\n",
    "    ),\n",
    "    DataSetDefinition(\n",
    "        name=\"dataset_2\",\n",
    "        independent=[set1, set3],\n",
    "        dependent=[meas3],\n",
    "        experiment=experiment,\n",
    "    ),\n",
    "]\n",
    "with datasaver_builder(dataset_definition) as datasavers:\n",
    "    for val1, val2, val3 in product(range(5), repeat=3):\n",
    "        set1(val1)\n",
    "        set2(val2)\n",
    "        set3(val3)\n",
    "        meas2_val = meas2()\n",
    "        meas3_val = meas3()\n",
    "        datasavers[0].add_result((set1, val1), (set2, val2), (meas2, meas2_val))\n",
    "        datasavers[1].add_result((set1, val1), (set3, val3), (meas3, meas3_val))\n",
    "    datasets = [datasaver.dataset for datasaver in datasavers]\n",
    "\n",
    "plot_dataset(datasets[0])\n",
    "plot_dataset(datasets[1])"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Using `dond_into`\n",
    "`dond_into` is a dond-like utility function which performs gridded measurements and writes them to a specified datasaver. Unlike `dond` however, `dond_into` can write to the same datasaver -- and thus the same dataset -- multiple times. There are caveats, though.\n",
    "1. `dond_into` will not stop a user from measuring the same data point more than once, which may lead to unexpected output shapes, especially when converted to an xarray.\n",
    "2. `dond_into` does not support `TogetherSweeps` or multiple datasets via grouping parameters. These arguments will raise Exceptions if passed.\n",
    "\n",
    "In this example, we take two slices from the same measurement function: one at low resolution, and another at high resolution. Both sets of data are then written to the same dataset.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Starting experimental run with id: 3. \n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "core_test_measurement = Measurement(name=\"core_test_1\", exp=experiment)\n",
    "core_test_measurement.register_parameter(set1)\n",
    "core_test_measurement.register_parameter(meas1, setpoints=[set1])\n",
    "with core_test_measurement.run() as datasaver:\n",
    "    sweep1 = LinSweep(set1, 0, 5, 11, 0.001)\n",
    "    dond_into(datasaver, sweep1, meas1)\n",
    "\n",
    "    sweep2 = LinSweep(set1, 10, 20, 100, 0.001)\n",
    "    dond_into(datasaver, sweep2, meas1)\n",
    "\n",
    "    dataset = datasaver.dataset\n",
    "plot_dataset(dataset, marker=\".\")"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Using `datasaver_builder` with `dond_into` and `LinSweeper`\n",
    "\n",
    "Put together, the `datasaver_builder` and `dond_into` extensions provide a clean way of writing flexible measurement code that too complicated for `dond` yet too simple for the full power of the `Measurement` object.\n",
    "\n",
    "In the example below, we also introduce a new class, the `LinSweeper`. This is an iterable that sets the given swept parameter according to the inputs. It is useful for building outer-loops, within which more detailed measurements or functions are called. Once again, arbitrary code blocks can be included, simplifying the equivalent of dond's `enter_actions`, `exit_actions`, and `break_conditions` kwargs. Instead of being arguments, they can be explicitly included in the measurement, and can be nested precisely where the user wants them."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Starting experimental run with id: 4. \n",
      "Starting experimental run with id: 5. \n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "dataset_definition = [\n",
    "    DataSetDefinition(name=\"dataset_1\", independent=[set1, set2], dependent=[meas2]),\n",
    "    DataSetDefinition(name=\"dataset_2\", independent=[set1, set3], dependent=[meas3]),\n",
    "]\n",
    "with datasaver_builder(dataset_definition) as datasavers:\n",
    "    for _ in LinSweeper(set1, 0, 10, 11, 0.001):\n",
    "        sweep1 = LinSweep(set2, 0, 10, 11, 0.001)\n",
    "        sweep2 = LinSweep(set3, -10, 0, 11, 0.001)\n",
    "        dond_into(datasavers[0], sweep1, meas2, additional_setpoints=(set1,))\n",
    "        dond_into(datasavers[1], sweep2, meas3, additional_setpoints=(set1,))\n",
    "    datasets = [datasaver.dataset for datasaver in datasavers]\n",
    "\n",
    "plot_dataset(datasets[0])\n",
    "plot_dataset(datasets[1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Using `datasaver_builder` and `dond_into` with `ParameterWithSetpoints`\n",
    "\n",
    "One final use case includes support for the `ParameterWithSetpoints`. As seen below, the `datasaver_builder` and `dond_into` behave intuitively with these special parameters."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Starting experimental run with id: 6. \n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "dataset_definition = [\n",
    "    DataSetDefinition(name=\"dataset_1\", independent=[set1], dependent=[pws])\n",
    "]\n",
    "with datasaver_builder(dataset_definition) as datasavers:\n",
    "    for _ in LinSweeper(set1, 0, 10, 11, 0.001):\n",
    "        dond_into(datasavers[0], pws, additional_setpoints=(set1,))\n",
    "\n",
    "    datasets = [datasaver.dataset for datasaver in datasavers]\n",
    "\n",
    "plot_dataset(datasets[0])"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "bringup-dev",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.6"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "58ba35545862df1654293636174b4c99ecf11cb4e666dc0cc0b7e9739510814a"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
