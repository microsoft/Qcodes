{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "type" : "object",
    "description": "schema for a qcodes config file",
    "properties":{
        "core" : {
            "description": "controls core settings of qcodes",
            "type" : "object",
            "properties" : {
                "default_fmt": {
                    "type" : "string",
                    "description": "default location formatter used for the legacy dataset",
                    "default": "data/{date}/#{counter}_{name}_{time}"
                },
                "loglevel" :{
                    "type" : "string",
                    "description": "deprecated - use logger.console_level",
                    "default": "DEBUG",
                    "enum" : [
                        "CRITICAL",
                        "ERROR",
                        "WARNING",
                        "INFO",
                        "DEBUG"
                    ]
                },
                "file_loglevel" :{
                    "type" : "string",
                    "description": "deprecated - use logger.file_level",
                    "default": "INFO",
                    "enum" : [
                        "CRITICAL",
                        "ERROR",
                        "WARNING",
                        "INFO",
                        "DEBUG"
                    ]
                },
                "register_magic" : {
                    "description": "Register QCoDeS magic when in IPython. Can be set to True, False, or a list of magic commands to be registered",

                    "anyOf" : [
                        {"type": "boolean"},
                        {"type": "array"}
                    ],
                    "default": true
                },
                "import_legacy_api" : {
                    "description": "Import the legacy api in main qcodes namespace",
                    "type":"boolean",
                    "default": false
                },
                "db_debug": {
                    "description": "Use debugging mode in sqlite ",
                    "type" : "boolean",
                    "default": false
                },
                "db_location": {
                    "type": "string",
                    "description": "location of the database",
                    "default": "./experiments.db"
                }
            },
            "required":["db_location"]
        },
        "logger" : {
            "description": "controls all settings related to the logging module `qcodes.utils.logger`.",
            "type" : "object",
            "properties" : {
                "start_logging_on_import": {
                    "type": "string",
                    "enum": ["always", "never", "if_telemetry_set_up"],
                    "description": "whether to call `start_all_logging` on qcodes import time. Valid values are 'always', 'never', 'if_telemetry_set_up'.",
                    "default": "if_telemetry_set_up"
                },
                "console_level" :{
                    "type" : "string",
                    "description": "control logging level of console output",
                    "default": "DEBUG",
                    "enum" : [
                        "CRITICAL",
                        "ERROR",
                        "WARNING",
                        "INFO",
                        "DEBUG"
                    ]
                },
                "file_level" :{
                    "type" : "string",
                    "description": "control logging level of file output.",
                    "default": "INFO",
                    "enum" : [
                        "CRITICAL",
                        "ERROR",
                        "WARNING",
                        "INFO",
                        "DEBUG"
                    ]
                },
                "logger_levels":{
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "default":{
                        "pyvisa": "INFO"
                    }
                }
            },
            "required":["console_level", "file_level"]
        },
        "subscription":{
            "type": "object",
            "description": "Controls how subscriptions to the dataset, for e.g. live plotting, are handled. Here subscribers can be registered so that they will be available through `DataSet.subscribe_from_config`. Additionally default subscribers for every DataSet that is generated by the `Measurement` object can be defined.",
            "properties":{
                "subscribers":{
                    "type": "object",
                    "description": "List of available pre-configured subscribers. The names of the subscriber entries are available as arguments of the `DataSet.subscribe_from_config` method and can be used in this conifg in the `subscription.default_subscribers` property.",
                    "additional_properties":{
                        "type": "object",
                        "properties":{
                            "factory": {
                                "type": "string",
                                "description": "Full location of a factory class in the form '<package_name>.<subpackage>.<classname>'. The factory class has the following footprint:\n class Subscriber:\n    def __init__(self, dataset, **factory_kwargs):\n    def __call__(self, results, length, state):\n"
                            },
                            "factory_kwargs": {
                                "type": "object",
                                "additionnal_properties":{},
                                "description": "kwargs that get passed to the factory when creating a new subscriber."
                            },
                            "subscription_kwargs": {
                                "type": "object",
                                "description": "kwargs with which subscribe will be called.",
                                "properties":{
                                    "min_wait":{
                                        "type": "integer",
                                        "default": 0
                                    },
                                    "min_count":{
                                        "type": "integer",
                                        "default": 1
                                    },
                                    "callback_kwargs": {
                                        "description": "kwargs passed to the callback.",
                                        "type": "object",
                                        "additionnal_properties": {},
                                        "default": {}
                                    }
                                },
                                "default_subscribers":{
                                    "description": "List of default subscribers as defined in 'subscription.subscribers'. All subscribers in the list will be added to any DataSet created by the `Measurement.run()` call.",
                                    "type": "array",
                                    "items":{
                                        "type": "string"
                                    },
                                    "default": []
                                }

                            }
                        }
                    }
                }

            }
        },
        "gui" : {
            "type" : "object",
            "description": "controls legacy gui of qcodes",
            "properties" : {
                "notebook": {
                    "description": "Use notebook frontend",
                    "type" : "boolean",
                    "default": true
                },
                "plotlib": {
                    "description": "Plotting library set to null to run without plotting",
                    "type": ["string", "null"],
                    "enum": ["QT", "matplotlib", "all", null],
                    "default": null
                },
                "pyqtmaxplots": {
                    "description": "Maximum number of PyQtPlots to automatically keep in memory",
                    "type": "integer",
                    "default": 100
                }

            },
            "required":[ "notebook", "plotlib", "pyqtmaxplots" ]
        },
        "plotting" : {
            "type" : "object",
            "description": "controls plotting functions i.e. `plot_dataset`",
            "properties" : {
                "default_color_map":{
                    "description": "Default colormap to use for `plot_dataset`.",
                    "type": "string",
                    "default": "viridis"
                },
                "rasterize_threshold":{
                    "description": "Scatter plots and heatmaps with more than this number of points will have their data rasterized by default when saved in vector format",
                    "type": "integer",
                    "default": 5000
                },
                "auto_color_scale":{
                    "type" : "object",
                    "description": "Control of a auto color scale, that scales such that potential outliers of the data will not be included in the min/max range.",
                    "properties" : {
                        "enabled":{
                            "description": "Enable automatic color scaling",
                            "type": "boolean",
                            "default": false
                        },
                        "cutoff_percentile":{
                            "description": "Upper and lower percentage of datapoints that may maximally be discarded by the auto color scale. For example for [1,1] the auto color scale will in a set of 10 0000 points not clip more than the 100 points of lowest and highest value.",
                            "type": "array",
                            "items": [
                                {"type": "number"},
                                {"type": "number"}
                            ],
                            "default": [0.5, 0.5]
                        },
                        "color_over":{
                            "description": "Matplotlib color representing the datapoints clipped by the upper limit",
                            "default": "white"
                        },
                        "color_under":{
                            "description": "Matplotlib color representing the datapoints clipped by the lower limit",
                            "default": "grey"
                        }
                    }
                }
            }
        },
        "user": {
            "type": "object",
            "properties": {
                "scriptfolder": {
                    "type": "string",
                    "default": "/",
                    "description": "Location of scripts for general experiments"
                },
                "mainfolder": {
                    "type": "string",
                    "default": "",
                    "description": "Location of experiments"
                }
            },
            "description": "Optional feature for qdev-wrappers package: controls user settings of qcodes"
        },
        "station": {
            "type": "object",
            "properties": {
                "enable_forced_reconnect": {
                    "type": "boolean",
                    "default": false,
                    "description": "If set to true, on instantiation of an existing instrument from station configuration, the existing instrument instance will be closed."
                },
                "default_folder": {
                    "type": ["string", "null"],
                    "default": null,
                    "description": "Default folder where to look for a YAML station configuration file"
                },
                "default_file": {
                    "type": ["string", "null"],
                    "default": null,
                    "description": "Default file name, specifying a YAML station configuration file to load, when none is specified. The path can be absolute, relative to the current folder or relative to the default folder as specified in the qcodes config."
                },
                "use_monitor": {
                    "type": "boolean",
                    "default": false,
                    "description": "Update the monitor based on the monitor attribute specified in the instruments section of the station config yaml file."
                }
            },
            "description": "Settings for QCoDeS Station."
        },
        "GUID_components":{
            "type": "object",
            "properties": {
                "location": {
                    "type": "integer",
                    "default": 0,
                    "description": "Geographical location code"
                },
                "work_station": {
                    "type": "integer",
                    "default": 0,
                    "description": "Work station identification code"
                },
                "sample": {
                    "type": "integer",
                    "default": 0,
                    "description": "Sample identification code"
            }
        },
        "description": "Identifiers for creating a GUID per run in the dataset database."
        },
        "dataset": {
            "type": "object",
            "properties": {
                "write_in_background": {
                    "type": "boolean",
                    "default": false,
                    "description": "Should the data be written from a background thread"
                },
                "write_period": {
                    "type": "number",
                    "default": 5.0,
                    "description": "How often should data be written to disk (s)"
                },
                "use_threads": {
                        "type": "boolean",
                        "default": false,
                        "description": "Should instruments be addresesed in parallel for process_params_meas() in doNd measurement"
                },
                "dond_plot": {
                    "type": "boolean",
                    "default": false,
                    "description": "Should dond functions automatically open a plot after the measurement completes"
                },
                "dond_show_progress": {
                    "type": "boolean",
                    "default": false,
                    "description": "Should dond functions show a progress bar during the measurement"
                },
                "export_automatic": {
                    "type": "boolean",
                    "default": false,
                    "description": "Should the data be exported automatically when a measurement is completed? If this is set 'export_type' must be set to a non null value."
                },
                "export_type": {
                    "type": ["string", "null"],
                    "enum": ["netcdf", "csv", null],
                    "default": null,
                    "description": "Data export type for exporting datasets to disk after a measurement finishes. Does not export if set to null (default). Currently supported type(s): netcdf, csv"
                },
                "export_path": {
                    "type": "string",
                    "default": "~",
                    "description": "Data export path for exporting datasets to disk after a measurement finishes. Only activated if export_type is set"
                },
                "export_prefix": {
                    "type": "string",
                    "default": "qcodes_",
                    "description": "Prefix to add to filename for exporting datasets to disk after a measurement finishes. Only activated if export_type is set"
                }
            },
            "description": "Settings related to the DataSet and Measurement Context manager",
            "required":[ "write_in_background", "write_period", "dond_plot", "dond_show_progress"]
        },
        "telemetry":{
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether or not to enable sending telemetry data to the developers of QCoDeS (or elsewhere)"
                },
                "instrumentation_key": {
                    "type": "string",
                    "default": "00000000-0000-0000-0000-000000000000",
                    "description": "A valid Azure Application Insights instrumentation key"
                }
            }
        }
    },
    "required":[ "gui", "core", "GUID_components", "dataset", "telemetry"]
}
