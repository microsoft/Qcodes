[build-system]
requires = [
    "setuptools >= 68.1.0",
    "versioningit >= 2.2.1",
]
build-backend = 'setuptools.build_meta'

[project]
name = "qcodes"
maintainers = [{name = "QCoDeS Core Developers", email = "qcodes-support@microsoft.com"}]
description = "Python-based data acquisition framework developed by the Copenhagen / Delft / Sydney / Microsoft quantum computing consortium"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
]
license = {text = "MIT"}
requires-python = ">=3.9"
dependencies = [
    "broadbean>=0.9.1",
    "h5netcdf>=0.10.0,!=0.14.0",
    # see https://github.com/h5netcdf/h5netcdf/issues/154
    "h5py>=3.0.0",
    "importlib-metadata>=4.4; python_version < '3.10'",
    "ipywidgets>=8.0.0,<9.0.0",
    "ipykernel>=6.6.0", # implicitly required by ipywidgets >=8.0.5
    "jsonschema>=4.9.0",
    "matplotlib>=3.3.3",
    "numpy>=1.21.0",
    "opencensus>=0.7.10",
    "opencensus-ext-azure>=1.0.4, <2.0.0",
    "packaging>=20.0",
    "pandas>=1.2.0",
    "pyarrow>=11.0.0", # will become a requirement of pandas. Installing explicitly silences a warning
    "pyvisa>=1.11.0, <1.15.0",
    "ruamel.yaml>=0.16.0,!=0.16.6",
    "tabulate>=0.8.0",
    "typing_extensions>=4.5.0",
    "tqdm>=4.59.0",
    "uncertainties>=3.1.4",
    "versioningit>=2.2.1",
    "websockets>=9.1",
    "wrapt>=1.13.2; python_version < '3.12'",
    "wrapt>=1.16.0; python_version >= '3.12'",
    "xarray>=2022.06.0",
    "cf_xarray>=0.8.4",
    "opentelemetry-api>=1.15.0",
    "dask>=2022.1.0", # we are making use of xarray features that requires dask implicitly
    # transitive dependencies. We list these explicitly to",
    # ensure that we always use versions that do not have",
    # known security vulnerabilities",
    "tornado>=6.3.3",
    "ipython>=8.10.0",
    "pillow>=9.0.0",
    "rsa>=4.7",
]

dynamic = ["version"]

[project.readme]
file = "README.rst"
content-type = "text/x-rst"

[project.urls]
Homepage = "https://github.com/QCoDeS/Qcodes"
Documentation = "https://microsoft.github.io/Qcodes/"
Source = "https://github.com/qcodes/qcodes"
Tracker = "https://github.com/QCoDeS/Qcodes/issues"
Changelog = "https://microsoft.github.io/Qcodes/changes/index.html"

[project.optional-dependencies]
zurichinstruments = ["zhinst-qcodes>=0.3"]
loop = ["qcodes_loop>=0.1.2"]
test = [
    "coverage[toml]>=6.0.0",
    "deepdiff>=5.0.2",
    "hypothesis>=6.85.0",
    "lxml>=4.6.0",
    "lxml-stubs>=0.4.0",
    "mypy>=0.971",
    "pandas-stubs>=1.2.0.1",
    "pytest>=7.2.0",
    "pytest-asyncio>=0.19.0",
    "pytest-cov>=3.0.0",
    "pytest-mock>=3.0.0",
    "pytest-rerunfailures>=10.0",
    "pytest-xdist>=2.0.0",
    "PyVisa-sim>=0.6.0",
    "sphinx>=4.5.0",  # sphinx extension tests
    "types-jsonschema>=4.16.0",
    "types_requests>=0.1.8",
    "types-setuptools>=57.0.0",
    "types-tabulate>=0.1.0",
    "types-tqdm>=4.64.6",
    "types_pywin32>=305.0.0.7",
    "qcodes_loop>=0.1.1",
    "zhinst.qcodes>=0.5", # typecheck zhinst driver alias
    "jinja2>=3.1.3", # transitive dependency pin due to cve in earlier version
]
docs = [
    "autodocsumm>=0.2.9",
    "nbsphinx>=0.8.9",
    "PyVisa-sim>=0.6.0",
    "sphinx>=6.2.0",
    "sphinx-favicon>=1.0",
    "sphinx-issues>=3.0.1",
    "sphinx-jsonschema>=1.19.1",
    "sphinx-rtd-theme>=1.0.0",
    "sphinxcontrib-towncrier>=0.3.0a0",
    "towncrier>=22.8.0",
    "scipy>=1.7.0", # examples using scipy
    "qcodes_loop>=0.1.1", # legacy dataset import examples
    "jinja2>=3.1.3", # transitive dependency pin due to cve in earlier version
]

[project.scripts]
qcodes-monitor = "qcodes.monitor.monitor:main"
qcodes-dynacool-server = "qcodes.instrument_drivers.QuantumDesign.DynaCoolPPMS.private.server:run_server"

[project.entry-points."qcodes.dataset.on_export"]
log_exported_ds = "qcodes.extensions:log_dataset_export_info"

[tool.coverage.run]
omit = [
    "src/qcodes/__init__.py",
    "*/__init__.py",
    "src/qcodes/tests/*",
]
[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "if TYPE_CHECKING:",
]

[tool.darker]
# done via ruff
isort = false

[tool.mypy]
strict_optional = true
show_column_numbers = true
plugins = "numpy.typing.mypy_plugin"
show_error_codes = true
enable_error_code = "ignore-without-code"
# strict confic. Eventually we would like to
# turn all of these on. These are all setings
# turned on by strict as of mypy 0.971
warn_unused_configs = true
# waiting for variadic generics so we
# can type numpy array constructors
disallow_any_generics = false
# we subclass non typed classes (from ipython / wrapt)
disallow_subclassing_any = false
# we are calling into untyped code from 3th parties
disallow_untyped_calls = false
disallow_untyped_defs = true
disallow_incomplete_defs = true
# triggers warnings in untyped code
check_untyped_defs = false
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
# this triggers failures due to returning
# values from untyped 3th party libs
warn_return_any = false
no_implicit_reexport = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "tests.*",
    "qcodes.tests.*",
    "qcodes.instrument.mockers.ami430",
    "qcodes.instrument_drivers.Harvard.*",
    "qcodes.instrument_drivers.Keysight.keysightb1500.message_builder.*",
]
disallow_untyped_defs = false
disallow_incomplete_defs = false

# these are packages that we import
# but don't have installed by default
# ruamel https://github.com/python/mypy/issues/12664
[[tool.mypy.overrides]]
module = [
    "clr",
    "gclib",
    "mcl_RF_Switch_Controller64",
    "mcl_RF_Switch_Controller_NET45",
    "pywinusb.*",
    "ruamel",
    "spyder.utils.site",
    "spyder_kernels.customize",
    "System.IO",
]
ignore_missing_imports = true

[tool.pyright]
include = ["src"]
ignore = [
    "src/qcodes/instrument_drivers/Harvard/Decadac.py",
    ]
reportMissingTypeStubs = true
reportDeprecated = true
stubPath = "typings/stubs"

typeCheckingMode = "standard"

[tool.pytest.ini_options]
minversion = "7.2"
junit_family = "legacy"
testpaths = "tests"
addopts = "-n auto --dist=loadfile"

markers = "serial"

# we ignore warnings
# triggered by third party packages
filterwarnings = [
    'ignore:Deprecated call to `pkg_resources\.declare_namespace:DeprecationWarning',  # google, sphinxcontrib
    'ignore:pkg_resources is deprecated as an API:DeprecationWarning', # pyvisa-sim
    'ignore:open_binary is deprecated:DeprecationWarning', # pyvisa-sim
    'ignore:datetime.datetime.utcfromtimestamp\(\) is deprecated and scheduled for removal in a future version:DeprecationWarning', # tqdm dateutil
    'ignore:Jupyter is migrating its paths to use standard platformdirs:DeprecationWarning' # jupyter
]

[tool.ruff]

extend-include = ["*.ipynb"]
extend-exclude = ["typings"]

[tool.ruff.lint]
# Enable Pyflakes `E` and `F` codes by default.
# UP pyupgrade
# PT025 invalid use of pytest fixtures in other fixtures
# RUF200 validate pyproject.toml
# I isort
# ISC flake8-implicit-str-concat
# TID253 banned-module-level-imports
# W pydocstyle
# PLx pylint
select = ["E", "F", "PT025", "UP", "RUF010", "RUF012", "RUF200", "I", "G", "ISC", "TID253", "NPY", "PLE", "PLR", "PLC", "PLW", "W", "D417", "D416", "D410", "D411", "D412", "D405", "D214", "TCH"]
# darker will fix this as code is
# reformatted when it is changed.
# G004 We have a lot of use of f strings in log messages
# so disable that lint for now
# NPY002 We have a lot of use of the legacy
# random number generator. Eventually we should port this
# code.
# PLxxxx are pylint lints that generate a fair amount of warnings
# it may be worth fixing some or these in the future
ignore = ["E501", "G004", "NPY002", "PLR2004", "PLR0913", "PLR0911", "PLR0912", "PLR0915", "PLW0602", "PLW0603", "PLW2901"]

[tool.ruff.lint.isort]

known-first-party = ["qcodes"]

[tool.ruff.lint.per-file-ignores]
# deprecated modules left
# for backwards compatibility
"src/qcodes/utils/validators.py" = ["F401"]
"src/qcodes/utils/threading.py" = ["F401"]
"src/qcodes/utils/plotting.py" = ["F401"]
"src/qcodes/utils/metadata.py" = ["F401"]
"src/qcodes/utils/helpers.py" = ["F401"]
"src/qcodes/instrument_drivers/AimTTi/AimTTi_PL601P_channels.py" = ["F401"]
"src/qcodes/instrument_drivers/tektronix/Keithley_6500.py" = ["F401"]
"src/qcodes/instrument_drivers/tektronix/Keithley_2600_channels.py" = ["F401"]
"src/qcodes/instrument_drivers/tektronix/Keithley_2450.py" = ["F401"]
"src/qcodes/instrument_drivers/tektronix/keithley_7510.py" = ["F401"]
"src/qcodes/instrument_drivers/signal_hound/USB_SA124B.py" = ["F401"]
"src/qcodes/instrument_drivers/rohde_schwarz/RTE1000.py" = ["F401"]
"src/qcodes/instrument_drivers/rigol/DS4000.py" = ["F401"]
"src/qcodes/instrument_drivers/rigol/DG4000.py" = ["F401"]
"src/qcodes/instrument_drivers/rigol/DP832.py" = ["F401"]
"src/qcodes/instrument_drivers/rigol/DP831.py" = ["F401"]
"src/qcodes/instrument_drivers/rigol/DP821.py" = ["F401"]
"src/qcodes/instrument_drivers/rigol/DS1074Z.py" = ["F401"]
"src/qcodes/instrument_drivers/rigol/DG1062.py" = ["F401"]
"src/qcodes/instrument_drivers/devices.py" = ["F401"]
"src/qcodes/instrument_drivers/basel/sp983c_remote.py" = ["F401"]
"src/qcodes/instrument_drivers/Lakeshore/Model_325.py" = ["F401"]
"src/qcodes/instrument_drivers/Lakeshore/Model_336.py" = ["F401"]
"src/qcodes/instrument_drivers/Lakeshore/Model_372.py" = ["F401"]
"src/qcodes/instrument_drivers/Minicircuits/RUDAT_13G_90.py" = ["F401"]
"src/qcodes/instrument_drivers/HP/HP8133A.py" = ["F401"]
"src/qcodes/instrument_drivers/HP/HP8753D.py" = ["F401"]
"src/qcodes/instrument_drivers/Keysight/N9030B.py" = ["F401"]

"src/qcodes/instrument_drivers/Keysight/KtM960x.py" = ["F405"]
"src/qcodes/instrument_drivers/Keysight/KtMAwg.py" = ["F405"]

# This triggeres in notebooks even with a md cell at the top
"*.ipynb" = ["E402"]

# TID253 these imports are fine at module level
# in tests and examples
# D417 no need to fix in deprecated module
"docs/*" = ["TID253"]
"src/qcodes/tests/*" = ["TID253", "D417"]
"tests/*" = ["TID253"]

[tool.ruff.lint.flake8-tidy-imports]
# There modules are relatively slow to import
# and only required in specific places so
# don't import them at module level
banned-module-level-imports = ["xarray", "pandas", "opencensus", "tqdm.dask", "dask", "matplotlib", "IPython"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-type-checking]
quote-annotations = true

[tool.setuptools.cmdclass]
sdist = "versioningit.cmdclass.sdist"
build_py = "versioningit.cmdclass.build_py"

[tool.towncrier]
package = "qcodes"
name = "QCoDeS"
directory = "docs/changes/newsfragments"
single_file = false
filename = "docs/changes/{version}.rst"
issue_format = ":pr:`{issue}`"

[tool.towncrier.fragment.breaking]
name = "Breaking Changes:"
[tool.towncrier.fragment.new]
name = "New:"
[tool.towncrier.fragment.improved]
name = "Improved:"
[tool.towncrier.fragment.new_driver]
name = "New Drivers:"
[tool.towncrier.fragment.improved_driver]
name = "Improved Drivers:"
[tool.towncrier.fragment.underthehood]
name = "Under the hood:"

[tool.versioningit]
default-version = "0.0"

[tool.versioningit.format]
distance = "{next_version}.dev{distance}+{branch}.{vcs}{rev}"
dirty = "{next_version}.dev{distance}+{branch}.{vcs}{rev}.dirty"
distance-dirty = "{next_version}.dev{distance}+{branch}.{vcs}{rev}.dirty"

[tool.versioningit.vcs]
method = "git"
match = ["v*"]

[tool.versioningit.onbuild]
source-file = "src/qcodes/_version.py"
build-file = "qcodes/_version.py"
